swagger: '2.0'
info:
  description: 'Webservice documentation for the LCA Collaboration Server'
  version: '2.0.2'
  title: 'LCA Collaboration Server Webservice'
  contact:
    email: 'greve@greendelta.com'
host: 'lcacommons.gov'
basePath: '/lca-collaboration'
schemes:
- https
- http
definitions:
  ModelType:
    type: string
    enum: &MODEL_TYPE
      - 'ACTOR'
      - 'CATEGORY'
      - 'CURRENCY'
      - 'DQ_SYSTEM'
      - 'EPD'
      - 'FLOW'
      - 'FLOW_PROPERTY'
      - 'IMPACT_CATEGORY'
      - 'IMPACT_METHOD'
      - 'LOCATION'
      - 'PARAMETER'
      - 'PROCESS'
      - 'PRODUCT_SYSTEM'
      - 'PROJECT'
      - 'RESULT'
      - 'SOURCE'
      - 'SOCIAL_INDICATOR'
      - 'UNIT_GROUP'
  FlowType:
    type: string
    enum: &FLOW_TYPE
      - 'ELEMENTARY_FLOW'
      - 'PRODUCT_FLOW'
      - 'WASTE_FLOW'
  ProcessType:
    type: string
    enum: &PROCESS_TYPE
      - 'UNIT_PROCESS'
      - 'LCI_RESULT'
  ModellingApproach:
    type: string
    enum: &MODELLING_APPROACH
      - 'PHYSICAL'
      - 'ECONOMIC'
      - 'CAUSAL'
      - 'NONE'
      - 'UNKNOWN'
  IndexAction:
    type: string
    enum: &INDEX_ACTION
      - 'ADD'
      - 'UPDATE'
      - 'DELETE'
  Credentials:
    type: object
    properties:
      username:
        description: 'The username of the user to login with'
        type: string
        example: 'john.doe'
      password:
        description: 'The password of the user to login with'
        type: string
        example: 'passw0rd'
      token:
        description: 'If two factor authentication is enabled, a token has to be provided'
        type: string
        example: '435163'
    required:
      - username
      - password
  AggregationResultEntry:
    type: object
    properties: 
      key:
        description: 'The key of this aggregation result entry'
        type: string
        example: 'ACTOR'
      data:
        description: 'The data of this aggregation result entry'
        type: string
        example: 'ACTOR'
      label:
        description: 'The label of this aggregation result entry'
        type: string
        example: 'Actor'
      count:
        description: 'The amount of entries found for the given key'
        type: integer
        format: int64
        example: '12'
      subEntries:
        description: 'Children elements in case of hierarchical entries'
        type: array
        items: 
          $ref: '#/definitions/AggregationResultEntry'
    required:
     - key
     - count
  AggregationResult:
    type: object
    properties: 
      name:
        description: 'The name of this aggregation result'
        type: string
        example: 'repositoryId'
      type:
        description: 'The type of aggregation'
        type: string
        example: 'TERM'
      totalCount:
        description: 'The amount of entries found for this aggregation'
        type: integer
        format: int64
        example: '13'
      entries:
        description: 'A list of entries into which the aggregation splits (each possible result value is a result entry)'
        type: array
        items: 
          $ref: '#/definitions/AggregationResultEntry'
    required:
      - name
      - type
      - totalCount
  ResultInfo:
    type: object
    properties: 
      pageSize:
        description: 'The size of each page of results'
        type: integer
        format: int32
        example: '10'
      count:
        description: 'The amount of actual results returned'
        type: integer
        format: int64
        example: '8'
      totalCount:
        description: 'The amount total results matching the query'
        type: integer
        format: int64
        example: '887'
      currentPage:
        description: 'The current page number'
        type: integer
        format: int32
        example: '8'
      pageCount:
        description: 'The total number of pages'
        type: integer
        format: int32
        example: '8'
      indexing:
       description: 'Indicates if the search engine is currently indexing more datasets and thus the result might be incomplete'
       type: boolean
       default: false
    required:
      - pageSize
      - count
      - totalCount
      - currentPage
      - pageCount
  SearchResult:
    type: object
    properties: 
      aggregations:
        description: 'The aggregations of the search result'
        type: array
        items:
          $ref: '#/definitions/AggregationResult'
      resultInfo:
        $ref: '#/definitions/ResultInfo'
    required:
      - resultInfo
  RepositoryDescriptorSearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/RepositoryDescriptor'
    required:
      - resultInfo
  GroupDescriptorSearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/GroupDescriptor'
    required:
      - resultInfo
  CommitSearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Commit'
    required:
      - resultInfo
  CommitReferenceSearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/CommitReference'
    required:
      - resultInfo
  IndexEntrySearchResult:
    allOf:
    - $ref: '#/definitions/SearchResult'
    properties:
      data:
        type: array
    required:
      - resultInfo
  UserDescriptor:
    type: object
    properties:
      username:
        description: 'A username, e.g. used for login, etc.'
        type: string
        example: 'johndoe'
      name:
        description: 'A display name for the user'
        type: string
        example: 'John Doe'
    required:
      - username
      - name
  TeamDescriptor:
    type: object
    properties:
      teamname:
        description: 'A teamname'
        type: string
        example: 'greendelta'
      name:
        description: 'A display label for the team'
        type: string
        example: 'GreenDelta GmbH'
    required:
      - teamname
      - name
  GroupDescriptor:
    type: object
    properties:
      name:
        description: 'The name of the group'
        type: string
        example: 'examples'
    required:
      - name
  Group:
    allOf: 
    - $ref: '#/definitions/GroupDescriptor'
    - properties:
        userCanDelete:
          description: 'True if the current user can delete the group'
          type: boolean
          default: false
        userCanWrite:
          description: 'True if the current user has permission to WRITE to the group'
          type: boolean
          default: false
        userCanCreate:
          description: 'True if the current user can create repositories within the group'
          type: boolean
          default: false
        userCanEditMembers:
          description: 'True if the current user can edit the members of the group'
          type: boolean
          default: false
  GroupSettings:
    type: object
    properties:
      label:
        description: 'The label of the group'
        type: string
      description:
        description: 'The description of the group'
        type: boolean
      noOfRepositories:
        description: 'The allowed number of repositories to be created in this group'
        type: integer
        format: int64
        default: 0
      maxSize:
        description: 'The allowed total size of all repositories inside this group'
        type: integer
        format: int64
        default: 0
  RepositorySettings:
    type: object
    properties:
      publicAccess:
        description: 'True if the repository can be accessed publicly'
        type: boolean
        default: false
      prohibitsCommits:
        description: 'True if the repository is locked for further commits'
        type: boolean
        default: false
      commentApproval:
        description: 'True if the a comment needs to be approved before publication'
        type: boolean
        default: false
      jsonFileGeneration:
        description: 'True if a json file should be created on commit'
        type: boolean
        default: false
      maxSize:
        description: 'The maximum size in bytes if a limitation is set, 0 otherwise'
        type: integer
        format: int64
        default: 0
      label:
        type: string
      version:
        type: string
      tags:
        type: string
      description:
        type: string
      sourceInfo:
        type: string
      contactInfo:
        type: string
      projetInfo:
        type: string
      projectFunding:
        type: string
      appropriateUse:
        type: string
      dqAssessment:
        type: string
      citation:
        type: string
      typeOfData:
        type: string
      searchCommitId:
        type: string
  RepositoryDescriptor:
    type: object
    properties:
      group: 
        description: 'The group of the repository'
        type: string
        example: 'examples'
      name: 
        description: 'The name of the repository'
        type: string
        example: 'reference_data'
      label:
        description: 'The label of the repository'
        type: string
      groupIsUserNamespace:
        description: 'True if the group is a user namespace'
        type: boolean
        default: false
      settings:
        $ref: '#/definitions/RepositorySettings'
      groupSettings:
        $ref: '#/definitions/GroupSettings'
    required:
      - group
      - name
  RepositoryMetaInfo:
    type: object
    properties:
      schemaVersion: 
        description: 'The JSON-LD schema version of this repository'
        type: string
        example: 'http://openlca.org/schema/v2.0/'
    required:
      - schemaVersion
  Repository:
    allOf: 
    - $ref: '#/definitions/RepositoryDescriptor'
    - properties:
        userCanDelete:
          description: 'True if the current user is allowed to delete the repository'
          type: boolean
          default: false
        userCanWrite:
          description: 'True if the current user is allowed to write to the repository'
          type: boolean
          default: false
        userCanMove:
          description: 'True if the current user is allowed to move the repository'
          type: boolean
          default: false
        userCanClone:
          description: 'True if the current user is allowed to clone the repository'
          type: boolean
          default: false
        userCanEditMembers:
          description: 'True if the current user is allowed to edit members of the repository'
          type: boolean
          default: false
        userCanSetSettings:
          description: 'True if the current user is allowed to change settings of the repository'
          type: boolean
          default: false
        size:
          description: 'The size of the repository in bytes'
          type: integer
          format: int64
          default: 0
  Role:
    type: string
    enum: &ROLES
      - 'READER'
      - 'CONTRIBUTOR'
      - 'REVIEWER'
      - 'EDITOR'
      - 'OWNER'
  Membership:
    type: object
    properties:
      memberOf:
        description: 'Group or group/repository path the user is member of'
        type: string
        example: 'examples/reference_data'
      role:
        description: 'The role of the user in this group or repository'
        type: string
        enum: *ROLES
        example: 'READER'
      user:
        allOf:
        - $ref: '#/definitions/UserDescriptor'
        - description: 'The user this membership is applying to (or null if its a team membership)'
      team:
        allOf:
        - $ref: '#/definitions/TeamDescriptor'
        - description: 'The team this membership is applying to (or null if its a user membership)'
    required:
      - memberOf
      - role
  Commit:
    type: object
    properties:
      id:
        description: 'The id of the commit'
        type: string
        example: 'b16964d2-a5a0-7d05-4c69-782d87904ed2'
      message:
        description: 'The message of the commit'
        type: string
        example: 'Changed some data sets'
      user:
        description: 'The username of the user that performed the commit'
        type: string
        example: 'johndoe'
      timestamp:
        description: 'The time when the commit was performed'
        type: integer
        format: int64
        example: 1552993526562
      userDisplayName:
        description: 'The display name of the user that performed the commit or the username if the user does not exist anymore'
        type: string
        example: 'John Doe'
    required:
      - id
      - message
      - user
      - timestamp
      - userDisplayName
  FileReference:
    type: object
    properties:
      type:
        description: 'The model type of the data set'
        type: string
        enum: *MODEL_TYPE
        example: 'ACTOR'
      refId: 
        description: 'The reference id of the data set'
        type: string
        example: '64b169d2-7d05-4c69-a5a0-90782d874ed2'
    required:
      - type
      - refId
  Reference:
    type: object
    properties:
      id: 
        description: 'The id of the reference'
        type: string
        example: '64b169d2-7d05-4c69-a5a0-90782d874ed2'
      type:
        description: 'The model type of the reference'
        type: string
        enum: *MODEL_TYPE
        example: 'ACTOR'
      name: 
        description: 'The name of the reference'
        type: string
        example: 'John Doe'
      commitId: 
        description: 'The commit id of the reference'
        type: string
        example: '90782d87-7d05-4c69-a5a0-8a5a0d874c69'
    required:
      - id
      - type
      - name
      - commitId
  Dataset:
    allOf: 
    - $ref: '#/definitions/FileReference'
    - properties:
        name:
          description: 'The name of the data set'
          type: string
          example: 'John Doe'
        version:
          description: 'The version of the data set, containing Major, Minor, Update version (Major.Minor.Update)'
          type: string
          example: '1.2.1'
        lastChange:
          description: 'The date of the last change to the data set, specified in milliseconds since 1/1/1970'
          type: integer
          format: int64
          example: '1552993525562'
        categoryRefId:
          description: 'The reference id of the category of the data set'
          type: string
          example: '34c253f2-057d-a05a-694c-2d89078724ed'
        categoryType:
          description: 'If this data set is of type CATEGORY, the categoryType specified for which type of data set this category is for'
          type: string
          enum: *MODEL_TYPE
          example: 'ACTOR'
        categories:
          description: 'The category path as array'
          type: array
          items:
            type: string
          example: ['Elementary flows', 'Resource', 'Unspecified']
    required:
      - name
      - version
      - lastChange
  CommitReference:
    allOf: 
    - $ref: '#/definitions/Dataset'
    - properties:
        deleted:
          description: 'Indicates if the data set was deleted in the last commit'
          type: boolean
          default: false
        added:
          description: 'Indicates if the data set was added in the last commit'
          type: boolean
          default: false
  GLADInput:
    type: object
    properties:
      dataprovider:
        description: 'The name of the data provider of the selected data sets (will be used in GLAD)'
        type: string
        example: 'GreenDelta GmbH'
      paths:
        description: 'Full dataset or category paths, e.g. "ACTORS" or "FLOWS/Elementary flows" or "PROCESS/example category/0fff6db0-464b-44f3-81af-381d88e7a1c3.json'
        type: array
        items:
          type: string
parameters:
  group:
    name: 'group'
    description: 'The group of the repository'
    in: path
    type: string
    required: true
  repo:
    name: 'repo'
    description: 'The name of the repository'
    in: path
    type: string
    required: true
  type:
    name: 'type'
    description: 'The model type of the data set'
    in: path
    type: string
    enum: *MODEL_TYPE
    required: true
  refId:
    name: 'refId'
    description: 'The reference id of the data set'
    in: path
    type: string
    required: true
  commitId:
    name: 'commitId'
    description: 'The commit id for the data set (or latest before)'
    in: query
    type: string
  username:
    name: 'username'
    description: 'The username of the user'
    in: path
    type: string
    required: true
  teamname:
    name: 'teamname'
    description: 'The teamname of the team'
    in: path
    type: string
    required: true
  role:
    name: 'role'
    description: 'The role of the user in the repository'
    in: path
    type: string
    required: true
  page:
    name: 'page'
    description: 'page value for pagination, if the value is 0, no paging is applied and all values will be returned'
    in: query
    type: integer
    format: int32
    default: 1
  pageSize:
    name: 'pageSize'
    description: 'Defines the page size for pagination if page is not 0'
    in: query
    type: integer
    format: int32
    default: 10
  filter:
    name: 'filter'
    description: 'Filters results that contain the phrase in their name'
    in: query
    type: string
responses:
  NotLoggedIn:
    description: 'Not authenticated'
  NoReadPerm:
    description: 'No permission to READ in {group}/{repo}'
  NoReadPermGroup:
    description: 'No permission to READ in {group}'
  NoWritePerm:
    description: 'No permission to WRITE in {group}/{repo}'
  NoWritePermGroup:
    description: 'No permission to WRITE in {group}'
  NoDeletePerm:
    description: 'No permission to DELETE {group}/{repo}'
  NoChangeRolePerm:
    description: 'No permission to CHANGE_ROLE in {group}/{repo}'
  NoSetSettingPermGroup:
    description: 'No permission to SET_SETTING in {group}'
  NoChangeRolePermGroup:
    description: 'No permission to CHANGE_ROLE in {group}'
  RepoNotFound:
    description: '{group}/{repo} not found'
  GroupNotFound:
    description: '{group} not found'
  UserNotFound:
    description: '{username} not found'
  UnsupportedSchema:
    description: 'Repository json schema version is not supported'
  NotUserManager:
    description: 'Not a user manager'
paths:
  /ws/public/login:
    post:
      tags:
      - 'Session'
      summary: 'Login'
      description: 'Logs in with the given credentials'
      operationId: 'login'
      consumes:
      - application/json
      produces:
      - application/json
      - text/plain
      parameters:
      - name: 'body'
        description: 'Login credentails'
        in: body
        required: true
        schema:
          $ref: '#/definitions/Credentials'
      responses:
        200:
          description: 'Login successful or "tokenRequired" (if two factor authentication is enabled an no token is provided)'
        401:
          description: 'Invalid credentials/Invalid token'
        403:
          description: 'Server is in maintenance mode (if not admin)'
        409:
          description: 'Already authenticated'
  /ws/public/browse/{group}/{repo}/{type}/{refId}:
    get:
      tags:
      - 'Dataset'
      summary: 'Download a data set'
      operationId: 'getDataset'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - $ref: '#/parameters/commitId'
      responses:
        200:
          description: 'Returns the data set as JSON-LD'
        403:
          $ref: '#/responses/NoReadPerm'
  /ws/group:
    get:
      tags:
      - 'Group'
      summary: 'List accessible groups'
      description: 'Loads a list of groups that are accessible for the client'
      operationId: 'getGroups'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      - name: 'onlyIfCanWrite'
        description: 'If true only groups the client has permission to WRITE to are returned'
        in: query
        type: boolean
        default: false
      responses:
        200:
          description: 'Returns a list of accessible groups'
          schema:
            $ref: '#/definitions/GroupDescriptorSearchResult'
        401:
          $ref: '#/responses/NotLoggedIn'
  /ws/group/{group}:
    get:
      tags:
      - 'Group'
      summary: 'Get group settings'
      description: 'Loads settings and permissions of {group}. For this operation the client needs permission to READ in {group}'
      operationId: 'getGroup'
      produces:
      - application/json
      responses:
        200:
          description: 'Returns the settings and permissions for {group}'
          schema:
            $ref: '#/definitions/Group'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPermGroup'
        404:
          description: '{group} not found'
    post:
      tags:
      - 'Group'
      summary: 'Create a new group'
      description: 'Creates a new group with {name}. For this operation the client needs general permission to create groups'
      operationId: 'createGroup'
      produces:
      - application/json
      responses:
        201:
          description: 'Returns the group descriptor of the newly created group'
          schema:
            $ref: '#/definitions/GroupDescriptor'
        400:
          description: 'Missing input for group name or invalid name. Valid names consist of four characters and only contain characters, number and _. Also some specific words are reserved'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          description: 'Not allowed to create groups'
        409:
          description: 'A group with the name {group} already exists'
    delete:
      tags:
      - 'Group'
      summary: 'Delete a group'
      description: 'Deletes {group} and all containing repositories. For this operation the client needs permission to DELETE {group}'
      operationId: 'deleteGroup'
      responses:
        200:
          description: '{group}/{name} was successfully deleted'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoDeletePerm'
    parameters:
    - name: 'group'
      description: 'The name for the group'
      in: path
      type: string
      required: true
  /ws/group/avatar/{group}:
    get:
      tags:
      - 'Group'
      summary: 'Get group avatar'
      description: 'Loads the avatar for {group}. For this operation the client needs permission to READ in {group}'
      operationId: 'getGroupAvatar'
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'Returns the avatar for {group} as byte array'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
    put:
      tags:
      - 'Group'
      summary: 'Set group avatar'
      description: 'Set the avatar for {group}. For this operation the client needs permission to WRITE in {group}'
      operationId: 'setGroupAvatar'
      consumes:
      - multipart/form-data
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'Returns the avatar for {group} as byte array'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
    parameters:
    - name: 'group'
      description: 'The name for the group'
      in: path
      type: string
      required: true
  /ws/group/settings/{group}/{setting}:
    put:
      tags:
      - 'Group'
      summary: 'Set group setting'
      description: 'Set the setting {setting} in group {group}. For this operation the client needs permission to SET_SETTING in {group}'
      operationId: 'setGroupSetting'
      responses:
        200:
          description: 'Setting was successfully set'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          description: '#/responses/NoSetSettingPermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
    parameters:
    - name: 'group'
      description: 'The name of the group'
      in: path
      type: string
      required: true
    - name: 'setting'
      description: 'The name of the group setting'
      in: path
      type: string
      required: true
    - name: 'body'
      description: 'The elements to export, if this element is a category, all children will be collected and exported'
      in: body
      schema:
        type: object
        properties:
          value:
            type: string
  /ws/public/repository:
    get:
      tags:
      - 'Repository'
      summary: 'List public repositories'
      description: 'Lists all public repositories inlcuding basic settings'
      operationId: 'getPublicRepositories'
      produces:
      - application/json
      responses:
        200:
          description: 'Returns all public repositories'
          schema:
            type: array
            items:
              $ref: '#/definitions/RepositoryDescriptor'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/repository/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get public repository settings'
      description: 'Loads settings of {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getPublicRepository'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns the settings for {group}/{repo}'
          schema:
            $ref: '#/definitions/RepositoryDescriptor'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/repository/avatar/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository avatar'
      description: 'Loads the avatar for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getPublicRepositoryAvatar'
      produces:
      - application/octet-stream
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns the avatar for {group}/{repo} as byte array'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/repository/file/{group}/{repo}/{type}/{refId}/{path}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository file'
      description: 'Loads file with name {path} of data set {type}/{refId} from {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryFile'
      produces:
      - application/octet-stream
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - $ref: '#/parameters/commitId'
      - name: 'path'
        description: 'The path/filename of the file to obtain'
        in: path
        type: string
        required: true
      responses:
        200:
          description: 'Returns {path} from data set {type}/{refId} for {commitId} in {group}/{repo} as byte array'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo}, data set {type}/{refId}, {commitId} or {path} not found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/repository:
    get:
      tags:
      - 'Repository'
      summary: 'List accessible repositories'
      description: 'Loads a list of repositories that are accessible for the client'
      operationId: 'getRepositories'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      - name: 'group'
        description: 'Filters repositories by group (exact match)'
        in: query
        type: string
      - name: 'module'
        description: 'Module specific filter. If value is "REVIEW", the list of accessible repositories is filtered for those the user can manage tasks in'
        in: query
        type: string
        enum: ['REVIEW']
      responses:
        200:
          description: 'Returns a list of accessible repositories'
          schema:
            $ref: '#/definitions/RepositoryDescriptorSearchResult'
        401:
          $ref: '#/responses/NotLoggedIn'
  /ws/repository/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository settings'
      description: 'Loads settings and permissions of {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepository'
      produces:
      - application/json
      responses:
        200:
          description: 'Returns the settings and permissions for {group}/{repo}'
          schema:
            $ref: '#/definitions/Repository'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
    post:
      tags:
      - 'Repository'
      summary: 'Create a new repository'
      description: 'Creates a new repository in {group} with name {repo}. For this operation the client needs permission to WRITE to {group} and general permission to create repositories'
      operationId: 'createRepository'
      produces:
      - application/json
      responses:
        201:
          description: 'Returns the repository descriptor of the newly created repository'
          schema:
            $ref: '#/definitions/RepositoryDescriptor'
        400:
          description: 'Missing input for group or name, not existing group or invalid name. Valid names consist of four characters and only contain characters, number and _. Also some specific words are reserved'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePermGroup'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{repo} already exists in {group}'
    delete:
      tags:
      - 'Repository'
      summary: 'Delete a repository'
      description: 'Deletes {group}/{repo}. For this operation the client needs permission to DELETE {group}/{repo}'
      operationId: 'deleteRepository'
      responses:
        200:
          description: '{group}/{name} was successfully deleted'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoDeletePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
    parameters:
    - $ref: '#/parameters/group'
    - $ref: '#/parameters/repo'
  /ws/repository/avatar/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository avatar'
      description: 'Loads the avatar for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryAvatar'
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'Returns the avatar for {group}/{repo} as byte array'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
    put:
      tags:
      - 'Repository'
      summary: 'Set repository avatar'
      description: 'Set the avatar for {group}/{repo}. For this operation the client needs permission to WRITE in {group}/{repo}'
      operationId: 'setRepositoryAvatar'
      consumes:
      - multipart/form-data
      produces:
      - application/octet-stream
      responses:
        200:
          description: 'Returns the avatar for {group}/{repo} as byte array'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
    parameters:
    - $ref: '#/parameters/group'
    - $ref: '#/parameters/repo'
  /ws/repository/meta/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Get repository meta information'
      description: 'Loads meta information for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryMetaInfo'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns repository meta information'
          schema:
            $ref: '#/definitions/RepositoryMetaInfo'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/repository/export/{group}/{repo}:
    get:
      tags:
      - 'Repository'
      summary: 'Export a repository (migrate)'
      description: 'Exports {group}/{repo} for migration to another collaboration server (only data and repo info is exported, comments and membership information are dropped). For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'exportRepository'
      produces:
      - application/octet-stream
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns a zip file containing the complete repository data directory, containing the data sets, commit history, settings and meta information'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/repository/import/{group}/{repo}:
    post:
      tags:
      - 'Repository'
      summary: 'Import data into an empty repository'
      description: 'Imports either an exported repository from another collaboration server or a JSON-LD zip file exported from openLCA. If {group}/{repo} is not empty, existing data will be overwritten. For this operation the client needs permission to WRITE in {group}/{repo}'
      operationId: 'importRepository'
      consumes:
      - multipart/form-data
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitMessage'
        description: 'The commit message in case of format=json-ld'
        in: formData
        type: string
      - name: 'file'
        description: 'The file to be imported'
        in: formData
        type: string
      - name: 'format'
        description: 'Either json-ld or empty (empty=import exported repository)'
        in: query
        type: string
      responses:
        200:
          description: 'The data was successfully imported'
        400:
          description: 'Missing input for commit message, when format=json-ld'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/repository/move/{group}/{repo}/{newGroup}/{newRepo}:
    post:
      tags:
      - 'Repository'
      summary: 'Move an existing repository'
      description: 'Move {group}/{repo} to {newGroup}/{newRepo} or rename it within the same group if {group}={newGroup}. For this operation the client needs permission to WRITE in {newGroup} and permission to READ in {group}/{repo}'
      operationId: 'moveRepository'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'newGroup'
        description: 'The name of the group to move {group}/{repo} to (if it equals the existing group, the repository is renamed)'
        in: path
        type: string
        required: true
      - name: 'newRepo'
        description: 'The new name of the repo'
        in: path
        type: string
        required: true
      responses:
        200:
          description: '{group}/{repo} was successfully moved/renamed'
        400:
          description: '{newGroup} does not exist'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{newGroup}/{newRepo} already exists'
  /ws/repository/clone/{group}/{repo}/{commitId}/{newGroup}/{newRepo}:
    post:
      tags:
      - 'Repository'
      summary: 'Clone an existing repository'
      description: 'Clone an existing repository to {newGroup}. For this operation the client needs permission to WRITE in {newGroup} and permission to READ in {group}/{repo}'
      operationId: 'cloneRepository'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitId'
        description: 'If specified only data until {commitId} are cloned'
        in: path
        type: string
        required: true
      - name: 'newGroup'
        description: 'The name of the group to move the repository to (if it equals the existing group, the repository is renamed'
        in: path
        type: string
        required: true
      - name: 'newRepo'
        description: 'The new name of the repo'
        in: path
        type: string
        required: true
      responses:
        200:
          description: 'The repository was successfully moved/renamed'
        400:
          description: '{newGroup} does not exist'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{newGroup}/{newRepo} already exists'
  /ws/repository/settings/{group}/{repo}/{setting}/{value}:
    put:
      tags:
      - 'Repository'
      summary: 'Change a setting of the repository'
      description: 'Change the value of {setting} to {value}. For this operation the client needs permission to WRITE in {group}/{repo}'
      operationId: 'setRepositorySetting'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'setting'
        description: 'The name of the setting to change'
        in: path
        type: string
        enum: ['publicAccess', 'prohibitCommits', 'commentApproval', 'maxSize']
        required: true
      - name: 'value'
        description: 'The new value for {setting}, a long value for maxSize or true/false for the other settings'
        in: path
        type: string
        required: true
      responses:
        200:
          description: '{setting} was changed to {value}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoWritePerm'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}:
    get:
      tags:
      - 'Membership (Group)'
      summary: 'Get memberships for a group'
      description: 'Get all memberships for {group}. For this operation the client needs permission to READ in {group}'
      operationId: 'getGroupMemberships'
      parameters:
      - $ref: '#/parameters/group'
      responses:
        200:
          description: 'Returns a list of memberships to {group}'
          schema:
            type: array
            items:
              $ref: '#/definitions/Membership'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
  /ws/membership/{group}/user/{username}/{role}:
    post:
      tags:
      - 'Membership (Group)'
      summary: 'Add a user to a group'
      description: 'Add {username} to {group} with {role}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'addUserMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/username'
      - $ref: '#/parameters/role'
      responses:
        201:
          description: '{username} was added to {group} with {role}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
        409:
          description: '{username} already is a direct member of {group}'
    put:
      tags:
      - 'Membership (Group)'
      summary: 'Update a users role in a group'
      description: 'Update the role of {username} in {group} to {role}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'updateUserMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/username'
      - $ref: '#/parameters/role'
      responses:
        200:
          description: 'The role of {username} was changed to {role} in {group}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          description: '{group} not found or {username} is not a member'
  /ws/membership/{group}/user/{username}:
    delete:
      tags:
      - 'Membership (Group)'
      summary: 'Delete a user from a group'
      description: 'Deletes {username} from {group}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'deleteUserMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/username'
      responses:
        200:
          description: '{username} was deletes from {group}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          description: '{group} not found or {username} is not a member'
  /ws/membership/{group}/team/{teamname}/{role}:
    post:
      tags:
      - 'Membership (Group)'
      summary: 'Add a team to a group'
      description: 'Add {teamname} to {group} with {role}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'addTeamMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/teamname'
      - $ref: '#/parameters/role'
      responses:
        201:
          description: '{teamname} was added to {group} with {role}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          $ref: '#/responses/GroupNotFound'
        409:
          description: '{teamname} already is a direct member of {group}'
    put:
      tags:
      - 'Membership (Group)'
      summary: 'Update a teams role in a group'
      description: 'Update the role of {teamname} in {group} to {role}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'updateTeamMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/teamname'
      - $ref: '#/parameters/role'
      responses:
        200:
          description: 'The role of {teamname} was changed to {role} in {group}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          description: '{group} not found or {teamname} is not a member'
  /ws/membership/{group}/team/{teamname}:
    delete:
      tags:
      - 'Membership (Group)'
      summary: 'Delete a team from a group'
      description: 'Deletes {teamname} from {group}. For this operation the client needs permission to CHANGE_ROLE in {group}'
      operationId: 'deleteTeamMembershipForGroup'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/teamname'
      responses:
        200:
          description: '{teamname} was deletes from {group}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePermGroup'
        404:
          description: '{group} not found or {teamname} is not a member'
  /ws/membership/{group}/{repo}:
    get:
      tags:
      - 'Membership (Repository)'
      summary: 'Get memberships for a repository'
      description: 'Get all memberships for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryMemberships'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      responses:
        200:
          description: 'Returns a list of memberships to {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}/{repo}/user/{username}/{role}:
    post:
      tags:
      - 'Membership (Repository)'
      summary: 'Add a user to a repository'
      description: 'Add {username} to {group}/{repo} with {role}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'addUserMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/username'
      - $ref: '#/parameters/role'
      responses:
        201:
          description: '{username} was added to {group}/{repo} with {role}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{username} already is a direct member of {group}/{repo}'
    put:
      tags:
      - 'Membership (Repository)'
      summary: 'Update a users role in a repository'
      description: 'Update the role of {username} in {group}/{repo} to {role}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'updateUserMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/username'
      - $ref: '#/parameters/role'
      responses:
        200:
          description: 'The role of {username} was changed to {role} in {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          description: '{group}/{repo} not found or {username} is not a member'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}/{repo}/user/{username}:
    delete:
      tags:
      - 'Membership (Repository)'
      summary: 'Delete a user from a repository'
      description: 'Deletes {username} from {group}/{repo}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'deleteUserMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/username'
      responses:
        200:
          description: '{username} was deletes from {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          description: '{group}/{repo} not found or {username} is not a member'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}/{repo}/team/{teamname}/{role}:
    post:
      tags:
      - 'Membership (Repository)'
      summary: 'Add a team to a repository'
      description: 'Add {teamname} to {group}/{repo} with {role}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'addTeamMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/teamname'
      - $ref: '#/parameters/role'
      responses:
        201:
          description: '{teamname} was added to {group}/{repo} with {role}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
        409:
          description: '{teamname} already is a direct member of {group}/{repo}'
    put:
      tags:
      - 'Membership (Repository)'
      summary: 'Update a teams role in a repository'
      description: 'Update the role of {teamname} in {group}/{repo} to {role}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'updateTeamMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/teamname'
      - $ref: '#/parameters/role'
      responses:
        200:
          description: 'The role of {teamname} was changed to {role} in {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          description: '{group}/{repo} not found or {teamname} is not a member'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/membership/{group}/{repo}/team/{teamname}:
    delete:
      tags:
      - 'Membership (Repository)'
      summary: 'Delete a team from a repository'
      description: 'Deletes {teamname} from {group}/{repo}. For this operation the client needs permission to CHANGE_ROLE in {group}/{repo}'
      operationId: 'deleteTeamMembershipForRepository'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/teamname'
      responses:
        200:
          description: '{teamname} was deletes from {group}/{repo}'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoChangeRolePerm'
        404:
          description: '{group}/{repo} not found or {teamname} is not a member'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/{group}/{repo}:
    get:
      tags: 
      - 'History'
      summary: 'Get commit history for a repository'
      description: 'Loads the commit history for {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getRepositoryCommitHistory'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'lastCommitId'
        description: 'If specified, only commits after the specified commit are returned'
        in: query
        type: string
      responses:
        200:
          description: 'The commit history of {group}/{repo}'
          schema:
            type: array
            items:
              $ref: '#/definitions/Commit'
        204:
          description: 'No commits found'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} or commit {lastCommitId} not found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/{group}/{repo}/{type}/{refId}:
    get:
      tags: 
      - 'History'
      summary: 'Get commit history for a data set'
      description: 'Loads the commit history for data set {refId} of {type} from {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getDatasetCommitHistory'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      responses:
        200:
          description: 'The commit history of data set {refId} in {group}/{repo}'
          schema:
            type: array
            items:
              $ref: '#/definitions/Commit'
        204:
          description: 'No commits found'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} or data set {refId} not found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/search/{group}/{repo}:
    get:
      tags: 
      - 'History'
      summary: 'Get paginated and filtered commit history'
      description: 'Loads the commit history for {group}/{repo}, filtered by {filter} and paged. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'searchCommitHistory'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      responses:
        200:
          description: 'The commit history for {group}/{repo}'
          schema:
            $ref: '#/definitions/CommitSearchResult'
        204:
          description: 'No commits found'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/references/{group}/{repo}/{commitId}:
    get:
      tags: 
      - 'History'
      summary: 'Search references of a commit'
      description: 'Loads the data sets that were {commitId} in {group}/{repo}, paged and filtered by {filter} and {type}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getCommitReferences'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitId'
        description: 'The commit id of the commit to get'
        in: path
        type: string
        required: true
      - name: 'type'
        description: 'If set only get references of type {type}'
        in: query
        type: string
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      responses:
        200:
          description: 'The data sets that were committed to {group}/{repo} during {commitId}'
          schema:
            $ref: '#/definitions/CommitReferenceSearchResult'
        204:
          description: 'No commits found'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          $ref: '#/responses/RepoNotFound'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/commit/{group}/{repo}/{commitId}:
    get:
      tags: 
      - 'History'
      summary: 'Get a commit'
      description: 'Loads {commitId} from {group}/{repo}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getCommit'
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'commitId'
        description: 'The commit id of the commit to get'
        in: path
        type: string
        required: true
      responses:
        200:
          description: 'Return {commitId} in {group}/{repo}'
          schema:
            $ref: '#/definitions/Commit'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} or {commitId} not found'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/history/previousCommitId/{group}/{repo}/{type}/{refId}/{commitId}:
    get:
      tags: 
      - 'History'
      summary: 'Get previous commit id'
      description: 'Looks up the id of the commit on {group}/{repo}, prior to {commitId}. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'getPreviousCommitId'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - name: 'commitId'
        description: 'The id of the commit to get the predecessor for'
        in: path
        type: string
        required: true
      responses:
        200:
          description: 'The id of the preceeding commit'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} or {commitId} not found or {commitId} was the first commit (no predecssor found)'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/search:
    get:
      tags:
      - 'Search'
      summary: 'Search data sets'
      description: 'Searches for data sets across the collaboration server'
      operationId: 'searchDatasets'
      produces:
      - application/json
      parameters:
      - name: 'query'
        description: 'Filter results by text'
        in: query
        type: string
      - name: 'group'
        description: 'Filter by group name (exact matches)'
        in: query
        type: string
      - name: 'repositoryId'
        description: 'Filter by repositoryId (group/repo) (exact matches)'
        in: query
        type: string
      - name: 'type'
        description: 'Filter by model type (exact matches)'
        enum: *MODEL_TYPE
        in: query
        type: string
      - name: 'categoryPaths'
        description: 'Filter by category path (exact matches, only applies if type is set)'
        in: query
        type: string
      - name: 'flowType'
        description: 'Filter by flow type (exact matches, only applies if type=FLOW)'
        enum: *FLOW_TYPE
        in: query
        type: string
      - name: 'processType'
        description: 'Filter by process type (exact matches, only applies if type=PROCESS)'
        enum: *PROCESS_TYPE
        in: query
        type: string
      - name: 'modellingApproach'
        description: 'Filter by modellingApproach (exact matches, only applies if type=PROCESS)'
        enum: *MODELLING_APPROACH
        in: query
        type: string
      - name: 'validFromYear'
        description: 'Filter by validFromYear (exact matches, only applies if type=PROCESS)'
        in: query
        type: integer
        format: int64
      - name: 'validUntilYear'
        description: 'Filter by validUntilYear (exact matches, only applies if type=PROCESS)'
        in: query
        type: integer
        format: int64
      - name: 'location'
        description: 'Filter by location (exact matches, only applies if type=PROCESS)'
        in: query
        type: string
      - name: 'contact'
        description: 'Filter by contact (exact matches, only applies if type=PROCESS)'
        in: query
        type: string
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      responses:
        200:
          description: 'Returns all data sets that were found for the given criteria'
          schema:
            type: array
            items: 
              $ref: '#/definitions/IndexEntrySearchResult'
  /ws/public/search/flowLinks/{flowRefId}:
    get:
      tags:
      - 'Search'
      summary: 'Search flow links'
      description: 'Searches for data sets that either produce, emit or consume {flowRefId}'
      operationId: 'searchFlowLinks'
      produces:
      - application/json
      parameters:
      - name: 'flowRefId'
        description: 'The ref id of the flow to search links for'
        in: path
        type: string
        required: true
      - $ref: '#/parameters/commitId'
      - name: 'direction'
        description: 'Filter by flow direction'
        in: query
        type: string
        enum: ['in', 'out', 'both']
      - name: 'repositoryId'
        description: 'Filter by repository id (group/repo)'
        in: query
        type: string
      - $ref: '#/parameters/page'
      - $ref: '#/parameters/pageSize'
      - $ref: '#/parameters/filter'
      responses:
        200:
          description: 'Returns all data sets that meet {refId} and optional filters'
          schema:
            type: array
            items: 
              $ref: '#/definitions/IndexEntrySearchResult'
  /ws/public/download/json/prepare/{group}/{repo}:
    get:
      tags: 
      - 'Download (JSON-LD 2.0)'
      summary: 'Prepare download of a repository'
      description: 'Collects and compresses data sets in {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJsonDownloadMultiPath'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'path'
        description: 'A category path to filter the data sets to export'
        in: query
        type: string
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
    post:
      tags: 
      - 'Download (JSON-LD 2.0)'
      summary: 'Prepare download of a repository (direct selection with category children)'
      description: 'Collects and compresses data sets in {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJsonDownloadMultiCategories'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'body'
        description: 'The elements to export, if this element is a category, all children will be collected and exported'
        in: body
        schema:
          type: array
          items:
            $ref: '#/definitions/Reference'
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
    put:
      tags: 
      - 'Download (JSON-LD 2.0)'
      summary: 'Prepare download of a repository (direct selection without category children)'
      description: 'Collects and compresses data sets in {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJsonDownloadMultiSelection'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'body'
        description: 'The elements to export'
        in: body
        schema:
          type: array
          items:
            $ref: '#/definitions/FileReference'
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/download/json/prepare/{group}/{repo}/{type}/{refId}:
    get:
      tags: 
      - 'Download (JSON-LD 2.0)'
      summary: 'Prepare download of a data set (single data set, with references)'
      description: 'Collects and compresses data set {type} {refId} and its references from {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJsonDownloadSingle'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - $ref: '#/parameters/commitId'
      responses:
        200:
          description: 'The token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {type} {refId} and {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/download/json/{token}:
    get:
      tags: 
      - 'Download (JSON-LD 2.0)'
      summary: 'Download a prepared JSON-LD zip-archive'
      description: 'Looks up the token in the temporary filestorage and returns the prepared JSON-LD zip-archive'
      operationId: 'downloadJson'
      produces:
      - application/octet-stream
      parameters:
      - name: 'token'
        description: 'The token returned by any of the prepare calls'
        type: string
        in: path
        required: true
      responses:
        200:
          description: 'Returns the prepared zip-archive'
        404:
          description: 'No prepared zip-archive found for {token}'
  /ws/public/download/json1/prepare/{group}/{repo}:
    get:
      tags: 
      - 'Download (JSON-LD 1.0)'
      summary: 'Prepare download of a repository'
      description: 'Collects and compresses data sets in {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJson1DownloadMultiPath'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'path'
        description: 'A category path to filter the data sets to export'
        in: query
        type: string
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
    post:
      tags: 
      - 'Download (JSON-LD 1.0)'
      summary: 'Prepare download of a repository (direct selection with category children)'
      description: 'Collects and compresses data sets in {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJson1DownloadMultiCategories'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'body'
        description: 'The elements to export, if this element is a category, all children will be collected and exported'
        in: body
        schema:
          type: array
          items:
            $ref: '#/definitions/Reference'
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
    put:
      tags: 
      - 'Download (JSON-LD 1.0)'
      summary: 'Prepare download of a repository (direct selection without category children)'
      description: 'Collects and compresses data sets in {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJson1DownloadMultiSelection'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/commitId'
      - name: 'body'
        description: 'The elements to export'
        in: body
        schema:
          type: array
          items:
            $ref: '#/definitions/FileReference'
      responses:
        200:
          description: 'Returns the token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/download/json1/prepare/{group}/{repo}/{type}/{refId}:
    get:
      tags: 
      - 'Download (JSON-LD 1.0)'
      summary: 'Prepare download of a data set (single data set, with references)'
      description: 'Collects and compresses data set {type} {refId} and its references from {group}/{repo} into a JSON-LD zip-archive, which can be downloaded by using the returned download token. For this operation the client needs permission to READ in {group}/{repo}'
      operationId: 'prepareJson1DownloadSingle'
      produces:
      - text/plain
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - $ref: '#/parameters/type'
      - $ref: '#/parameters/refId'
      - $ref: '#/parameters/commitId'
      responses:
        200:
          description: 'The token to download the prepared zip-archive. see Download (JSON-LD)'
        403:
          $ref: '#/responses/NoReadPerm'
        404:
          description: '{group}/{repo} not found or no data found for {type} {refId} and {commitId}'
        406:
          $ref: '#/responses/UnsupportedSchema'
  /ws/public/download/json1/{token}:
    get:
      tags: 
      - 'Download (JSON-LD 1.0)'
      summary: 'Download a prepared JSON-LD zip-archive'
      description: 'Looks up the token in the temporary filestorage and returns the prepared JSON-LD zip-archive'
      operationId: 'downloadJson1'
      produces:
      - application/octet-stream
      parameters:
      - name: 'token'
        description: 'The token returned by any of the prepare calls'
        type: string
        in: path
        required: true
      responses:
        200:
          description: 'Returns the prepared zip-archive'
        404:
          description: 'No prepared zip-archive found for {token}'
  /ws/datamanager/glad/push/{group}/{repo}:
    post:
      tags: 
      - 'GLAD'
      summary: 'Push repository data sets to GLAD'
      description: 'Pushes the selected data sets to the preconfigured GLAD node. For this operation the client needs special permission to manage data'
      operationId: 'pushToGLAD'
      parameters:
      - $ref: '#/parameters/group'
      - $ref: '#/parameters/repo'
      - name: 'body'
        description: 'The elements to export, if an element is a category, all children will be collected and exported'
        in: body
        schema:
          $ref: '#/definitions/GLADInput'
      consumes:
      - application/json
      responses:
        200:
          description: 'Data sets were successfully pushed to the preconfigured GLAD node'
        401:
          $ref: '#/responses/NotLoggedIn'
        403:
          description: 'Not a data manager'
        404:
          $ref: '#/responses/RepoNotFound'
        503:
          description: 'Invalid GLAD node configuration, contact data manager or administrator'