name: Build and Deploy LCA Collaboration Server

on:
  push:
    branches:
      - main
      - 'dev/**'
      - 'release/**'
      - 'feature/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Determine Deployment Environment
        id: mapenv
        run: |
          if [[ "${GITHUB_REF_NAME}" == feature/* ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_NAME}" == release/* ]]; then
            echo "env=stage" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_NAME}" == main ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          fi

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Checkout LCA Repository
        uses: actions/checkout@v4

      - name: Checkout Other Repositories
        uses: actions/checkout@v4
        with:
          repository: GreenDelta/search-wrapper
          path: search-wrapper-repo

      - name: Checkout OLCA Modules
        uses: actions/checkout@v4
        with:
          repository: GreenDelta/olca-modules
          path: olca-modules

      - name: Create Ephemeral Azure VM
        id: create_vm
        run: |
          VM_NAME=lca-ephemeral-${{ github.run_id }}-${{ github.run_number }}
          echo "VM_NAME=$VM_NAME" >> $GITHUB_ENV

          az vm create \
            --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} \
            --name $VM_NAME \
            --image ${{ vars.AZ_VM_IMAGE }} \
            --admin-username ${{ secrets.AZ_VM_USERNAME }} \
            --generate-ssh-keys \
            --size ${{ vars.AZ_VM_SIZE }} \
            --output json > vm.json

          VM_IP=$(jq -r '.publicIpAddress' vm.json)
          echo "VM_IP=$VM_IP" >> $GITHUB_ENV

      - name: Install Prerequisites on Remote VM
        run: |
          echo "Transferring install-prerequisites.sh to VM..."
          scp -o StrictHostKeyChecking=no scripts/install-prerequisites.sh \
            ${{ secrets.AZ_VM_USERNAME }}@$VM_IP:/home/${{ secrets.AZ_VM_USERNAME }}/

          echo "Running install-prerequisites.sh on VM..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZ_VM_USERNAME }}@$VM_IP <<EOF
            export DB_NAME="${{ vars.DB_NAME }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            chmod +x install-prerequisites.sh
            ./install-prerequisites.sh
          EOF

      - name: Copy Configuration Files to Remote VM
        run: |
          echo "Copying scripts and configs to remote VM..."
          scp -o StrictHostKeyChecking=no scripts/copy-configs.sh \
            ${{ secrets.AZ_VM_USERNAME }}@${{ env.VM_IP }}:/home/${{ secrets.AZ_VM_USERNAME }}/
          
          scp -o StrictHostKeyChecking=no -r configs \
            ${{ secrets.AZ_VM_USERNAME }}@${{ env.VM_IP }}:/home/${{ secrets.AZ_VM_USERNAME }}/
          
          echo "Executing copy-configs.sh on remote VM..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZ_VM_USERNAME }}@${{ env.VM_IP }} <<EOF
            chmod +x copy-configs.sh
            ./copy-configs.sh ${{ steps.mapenv.outputs.env }}
          EOF

      - name: Build Java Projects (Search Wrapper, OLCA, LCA Repo)
        run: |
          cd search-wrapper-repo && mvn clean install -DskipTests
          cd ../olca-modules && mvn clean install -DskipTests
          cd .. && mvn clean install -DskipTests

      - name: Upload WAR File
        uses: actions/upload-artifact@v4
        with:
          name: lca-war
          path: backend/target/collaboration-server-backend-*.war

      - name: Copy WAR to Tomcat
        run: |
          echo "Copying WAR file to remote VM..."
          scp -o StrictHostKeyChecking=no backend/target/collaboration-server-backend-*.war \
            ${{ secrets.AZ_VM_USERNAME }}@${{ env.VM_IP }}:/home/${{ secrets.AZ_VM_USERNAME }}/
          
          echo "Deploying WAR file to Tomcat..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZ_VM_USERNAME }}@${{ env.VM_IP }} << EOF
            sudo mv /home/${{ secrets.AZ_VM_USERNAME }}/collaboration-server-backend-*.war /opt/tomcat/webapps/lca-collaboration.war
          EOF
      - name: Generate SAS Token
        id: gensas
        run: |
          EXPIRY=$(date -u -d '1 hour' '+%Y-%m-%dT%H:%MZ')
          ACCOUNT_KEY=$(az storage account keys list \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --query '[0].value' -o tsv)

          SAS=$(az storage container generate-sas \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --name ${{ secrets.AZURE_CONTAINER_NAME }} \
            --permissions rl \
            --expiry "$EXPIRY" \
            --account-key "$ACCOUNT_KEY" \
            --https-only \
            --output tsv)

          echo "sas_token=$SAS" >> "$GITHUB_OUTPUT"

      - name: Install AzCopy & Download Artifacts
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZ_VM_USERNAME }}@${{ env.VM_IP }} << EOF
            echo "Installing AzCopy..."
            curl -sL https://aka.ms/downloadazcopy-v10-linux | tar -xz --strip-components=1
            sudo mv azcopy /usr/local/bin/

            echo "Creating /opt/lca-cs/repository if not exists..."
            sudo mkdir -p /opt/lca-cs/repository
            sudo chown -R $USER:$USER /opt/lca-cs/repository
            sudo chmod -R 777 /opt/lca-cs/repository

            echo "Downloading files using AzCopy..."
            azcopy copy "https://${{ secrets.AZURE_STORAGE_ACCOUNT }}.blob.core.windows.net/${{ secrets.AZURE_CONTAINER_NAME }}?${{ steps.gensas.outputs.sas_token }}" "/opt/lca-cs/repository/" --recursive

            echo "All files downloaded to /opt/lca-cs/repository"
          EOF

      - name: Restart services using Azure CLI
        run: |
          az vm run-command invoke \
            --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts '
              echo "Restarting services..."
              sudo systemctl restart nginx
              sudo systemctl restart tomcat
              sudo systemctl restart opensearch
            '

      - name: Clean Up Ephemeral VM and Resources
        if: false
        run: |
          echo "Cleaning up all resources for $VM_NAME"
          
          # Delete the VM (but it does NOT delete the NIC or disk by default)
          if az vm show --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} --name $VM_NAME &> /dev/null; then
            echo "Deleting VM..."
            az vm delete --yes --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} --name $VM_NAME
          else
            echo "VM already deleted or not found."
          fi
          
          # Delete OS disk
          OS_DISK_NAME=$(az disk list --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} --query "[?contains(name,'$VM_NAME')].name" -o tsv)
          if [ -n "$OS_DISK_NAME" ]; then
            echo "Deleting OS disk: $OS_DISK_NAME"
            az disk delete --name "$OS_DISK_NAME" --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} --yes
          fi
          
          # Get NIC name
          NIC_NAME=$(az network nic list --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} --query "[?contains(name,'$VM_NAME')].name" -o tsv)
          if [ -n "$NIC_NAME" ]; then
            echo "Found NIC: $NIC_NAME"
          
            # Disassociate public IP
            echo "Disassociating Public IP from NIC..."
            az network nic ip-config update \
              --name ipconfig$VM_NAME \
              --nic-name $NIC_NAME \
              --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} \
              --remove publicIpAddress || echo "Skipped or already disassociated."
          
            # Disassociate NSG
            echo "Disassociating NSG from NIC..."
            az network nic update \
              --name $NIC_NAME \
              --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} \
              --remove networkSecurityGroup || echo "NSG disassociation skipped or failed."
          
            echo "Deleting NIC..."
            az network nic delete --name $NIC_NAME --resource-group ${{ secrets.AZ_RESOURCE_GROUP }}
          else
            echo "NIC not found."
          fi
          
          # Delete Public IP
          echo "Deleting Public IP..."
          az network public-ip delete \
            --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} \
            --name ${VM_NAME}PublicIP || echo "Public IP may already be deleted."
          
          # Delete NSG
          echo "Deleting NSG..."
          az network nsg delete \
            --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} \
            --name ${VM_NAME}NSG || echo "NSG may already be deleted."
          
          echo "Cleanup complete."

